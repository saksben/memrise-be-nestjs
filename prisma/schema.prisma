// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  firstName       String
  lastName        String
  points          Int?      @default(0)
  // profilePic
  username        String    @unique
  password        String
  // subscription   ?       @default(free)
  toLearnPer      Int?      @default(5)
  toReviewPer     Int?      @default(25)
  toSpeedPer      Int?      @default(100)
  toDifficultPer  Int?      @default(5)
  createdCourses  Course[]  @relation("author")
  enrolledCourses Enrollment[]

  @@map("users")
  // createdCourses is a service method to get all courses with authorId of User's id
}

model Language {
  id              Int       @id @default(autoincrement())
  name            String    @unique
  slug            String
  // flag
  knownCourses    Course[] @relation("knownLanguage")
  learnedCourses  Course[]  @relation("learnLanguage")
}

model Course {
  id              Int       @id @default(autoincrement())
  name            String
  slug            String
  author          User      @relation("author", fields: [authorId], references: [id])
  authorId        Int
  description     String?
  lessons         Lesson[]  @relation("lessons")
  // img
  enrollments     Enrollment[]
  // avgTime         Int
  knownLanguage   Language  @relation("knownLanguage", fields: [knownLanguageId], references: [id])
  knownLanguageId Int
  learnLanguage   Language  @relation("learnLanguage", fields: [learnLanguageId], references: [id])
  learnLanguageId Int
  // tags            String[]?

  @@map("courses")
}

model Lesson {
  id        Int       @id @default(autoincrement())
  name      String
  index     Int
  course    Course    @relation("lessons", fields: [courseId], references: [id])
  courseId  Int
  words     Word[]
  // category
  // categoryImg

  @@map("lessons")
}

model Word {
  id              Int       @id @default(autoincrement())
  name            String
  translation     String
  literal         String?
  pronunciation   String?
  partOfSpeech    String?
  gender          String?
  // pronunciationMale
  // pronunciationFemale
  mems            Json?
  progress        Int       @default(0)
  isDifficult     Boolean   @default(false)
  isIgnored       Boolean   @default(false)
  // img
  timeTilReview   DateTime?
  lesson          Lesson    @relation(fields: [lessonId], references: [id])
  lessonId        Int
}

model Enrollment {
  userId    Int
  courseId  Int

  user      User    @relation(fields: [userId], references: [id])
  course    Course  @relation(fields: [courseId], references: [id])

  @@id([userId, courseId]) // Composite primary key

  @@map("enrollments")
}